package client;

import org.eclipse.jgit.transport.CredentialsProvider;
import org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider;
import org.eclipse.jgit.lib.Ref;
import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.lib.Repository;
import org.eclipse.jgit.storage.file.FileRepositoryBuilder;

import org.deeplearning4j.nn.multilayer.MultiLayerNetwork;
import org.deeplearning4j.optimize.listeners.ScoreIterationListener;
import org.deeplearning4j.ui.api.UIServer;
import org.deeplearning4j.ui.stats.StatsListener;
import org.deeplearning4j.ui.storage.InMemoryStatsStorage;
import org.deeplearning4j.api.storage.StatsStorage;


import java.io.Console;
import java.io.File;
import java.util.List;
import java.util.Date;

import client.FaultClassifier;
import client.ModelFactory;
import faultrecordreader.ReducedFaultRecordReader;

public class GitTrainer {

    private static Git git;
    private static CredentialsProvider credentials;
    
    public static void main (String args[]) throws Exception{
	credentials = authenticate();
	git = verifyCredentials();
	
	String fileName = "models/simpleCNN_megaTrain.zip";

	FaultClassifier classifier;
	// check if a saved model exists
	if ((new File(fileName)).exists()) {
	    // initialize the classifier with the saved model
	    classifier = new FaultClassifier(fileName);
	} else {
	    // initialize the classifier with a fresh model
	    MultiLayerNetwork model = ModelFactory.simpleCNN(14);

	    classifier = new FaultClassifier(model);
	}

	int scoreIterations = 1000;
	// set up a local web-UI to monitor the training available at
	// localhost:9000
	UIServer uiServer = UIServer.getInstance();
	StatsStorage statsStorage = new InMemoryStatsStorage();
	// additionally print the score on every iteration
	classifier.setListeners(new StatsListener(statsStorage), new ScoreIterationListener(scoreIterations));
	uiServer.attach(statsStorage);

	// train the classifier for a number of checkpoints and save the model
	// after each checkpoint
	int checkPoints = 2000;
	for (int i = 0; i < checkPoints; i++) {
	    // do the saving and committing first to see that everything works
	    
	    // save the trained model
	    classifier.save(fileName);

	    // commit and push the changes
	    commitAndPush(fileName);
	    System.out.println("Pushed model on checkpoint "+i);
	    
	    // train the classifier
	    classifier.train(20, 45000, 1, new ReducedFaultRecordReader());
	    
	    // cool down a minute
	    Thread.sleep(60000);
	}
    }

    private static CredentialsProvider authenticate() {
	Console console = System.console();
	String userName = console.readLine("Username: ");
	char [] password = console.readPassword("Password: ");

	CredentialsProvider res = new UsernamePasswordCredentialsProvider(userName, password);
	return res;
    }

    private static Git verifyCredentials() throws Exception{
	Repository repo = new FileRepositoryBuilder()
	    .setMustExist(true)
	    .findGitDir()
	    .build();

	Git res = new Git(repo);

	// test if a push is possible to verify the credentials
	res.push().setCredentialsProvider(credentials).add("training").call();

	return res;
    }

    private static void commitAndPush(String fileName) throws Exception{
	// add the file
	git.add().addFilepattern("FaultFinderAI-DL4J/"+fileName).call();

	// commit it
	git.commit().setMessage("AUTOGENERATED COMMIT ON "+new Date()).call();

	// push it
	git.push().setCredentialsProvider(credentials).add("training").call();
    }
}
